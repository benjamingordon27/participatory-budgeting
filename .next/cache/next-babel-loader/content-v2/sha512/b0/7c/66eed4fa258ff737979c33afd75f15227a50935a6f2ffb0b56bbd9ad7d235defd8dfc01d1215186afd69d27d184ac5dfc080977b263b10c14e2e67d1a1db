{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benjamingordon/Documents/civic-alley-visualization/data-vis/containers/ParticipatoryBudgetMap/BudgetMap/BudgetMap.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MapMarker from '../../../components/UI/MapMarker/MapMarker';\nimport * as actions from '../../../store/actions/index';\nimport { translateCategory } from '../../../util/translateCategory';\nimport { withRouter } from 'next/router';\nimport Map from '../../../components/Map/Map';\nconst DEFAULT_CENTER = {\n  lat: 40.635,\n  lng: -73.94\n};\n\nclass BudgetMap extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      firstPageLoad: false\n    });\n\n    _defineProperty(this, \"markerClicked\", (center, item) => {\n      this.props.onZoomMarker(center, item);\n      console.log('url', this.props.url); // this.props.history.replace(this.props.url);\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.districts) {\n      this.props.onSetMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!this.state.firstPageLoad && this.props.loaded) {\n      this.props.onSetMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);\n      this.setState({\n        firstPageLoad: true\n      });\n    }\n\n    if (prevProps.selectedBudgetItems !== this.props.selectedBudgetItems) {\n      this.props.onResetMap();\n      this.props.onUpdateMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);\n    }\n\n    if (this.props.showDistricts !== prevProps.showDistricts) {\n      console.log('[BudgetMap.js] show districts');\n    }\n  }\n\n  render() {\n    let markers = [];\n\n    if (this.props.selectedBudgetItems) {\n      this.props.selectedBudgetItems.filter(item => item.latitude && item.longitude).map((item, idx) => {\n        markers.push( /*#__PURE__*/_jsxDEV(MapMarker, {\n          center: this.props.center,\n          lat: item.latitude,\n          lng: item.longitude,\n          item: translateCategory(item),\n          width: '30px',\n          height: '30px',\n          zoom: this.props.zoom ////figure out how to change on zoom change, might have to be rendered not in an array in component but in render itself\n          ,\n          clicked: () => this.markerClicked({\n            lat: item.latitude,\n            lng: item.longitude\n          }, item)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 30\n        }, this));\n      });\n    } // console.log('[BudgetMap.js] params', this.props.match.params)        \n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '87vh',\n        width: '100%'\n      },\n      children: this.props.mapProps ? /*#__PURE__*/_jsxDEV(Map, _objectSpread(_objectSpread({}, this.props.mapProps), {}, {\n        zoom: this.props.zoom,\n        center: this.props.center,\n        defaultCenter: DEFAULT_CENTER,\n        markers: markers,\n        showDistricts: this.props.showDistricts\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    currItem: state.participatoryBudget.currItem,\n    participatoryBudget: state.participatoryBudget.participatoryBudget,\n    councilMemberLoading: state.participatoryBudget.councilMemberLoading,\n    error: state.participatoryBudget.error,\n    councilMembers: state.participatoryBudget.councilMembers,\n    districts: state.participatoryBudget.districts,\n    districtsLoading: state.participatoryBudget.districtsLoading,\n    selectedDistricts: state.participatoryBudget.selectedDistricts,\n    loaded: state.participatoryBudget.loaded,\n    showDistricts: state.setMap.showDistricts,\n    mapProps: state.setMap.mapProps,\n    center: state.setMap.center,\n    zoom: state.setMap.zoom,\n    clickedItem: state.setMap.clickedItem,\n    selectedBudgetItems: state.subsets.selectedBudgetItems,\n    url: state.setMap.url\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems) => dispatch(actions.setMap(districts, selectedDistricts, councilMembers, selectedBudgetItems)),\n    onUpdateMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts) => dispatch(actions.updateMap(districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts)),\n    onResetMap: () => dispatch(actions.resetMap()),\n    onZoomMarker: (center, item) => dispatch(actions.zoomMarker(center, item))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(BudgetMap));","map":{"version":3,"sources":["/Users/benjamingordon/Documents/civic-alley-visualization/data-vis/containers/ParticipatoryBudgetMap/BudgetMap/BudgetMap.js"],"names":["React","Component","connect","MapMarker","actions","translateCategory","withRouter","Map","DEFAULT_CENTER","lat","lng","BudgetMap","firstPageLoad","center","item","props","onZoomMarker","console","log","url","componentDidMount","districts","onSetMap","selectedDistricts","councilMembers","selectedBudgetItems","componentDidUpdate","prevProps","prevState","state","loaded","setState","onResetMap","onUpdateMap","showDistricts","render","markers","filter","latitude","longitude","map","idx","push","zoom","markerClicked","height","width","mapProps","mapStateToProps","currItem","participatoryBudget","councilMemberLoading","error","districtsLoading","setMap","clickedItem","subsets","mapDispatchToProps","dispatch","updateMap","resetMap","zoomMarker"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport MapMarker from '../../../components/UI/MapMarker/MapMarker';\nimport * as actions from '../../../store/actions/index';\nimport {translateCategory} from '../../../util/translateCategory';\n\nimport { withRouter } from 'next/router';\n\nimport Map from '../../../components/Map/Map';\n\nconst DEFAULT_CENTER = { lat: 40.635, lng: -73.94 };\n\nclass BudgetMap extends Component{\n    state = {\n        firstPageLoad: false,\n    } \n\n    componentDidMount(){\n        if(this.props.districts){\n            this.props.onSetMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(!this.state.firstPageLoad && this.props.loaded){\n            this.props.onSetMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);\n            this.setState({firstPageLoad: true})\n        }\n\n        if((prevProps.selectedBudgetItems !== this.props.selectedBudgetItems)){\n            this.props.onResetMap();            \n            this.props.onUpdateMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);     \n        }    \n        \n        if((this.props.showDistricts !== prevProps.showDistricts)){\n            console.log('[BudgetMap.js] show districts')\n\n        }  \n    }\n\n    markerClicked = (center, item) => {        \n        this.props.onZoomMarker(center, item);\n        console.log('url',this.props.url)\n        // this.props.history.replace(this.props.url);\n    }\n\n    render(){     \n        \n        let markers = [];    \n        if(this.props.selectedBudgetItems){                    \n            this.props.selectedBudgetItems.filter(item => item.latitude && item.longitude).map((item,idx) => {\n                markers.push(<MapMarker \n                    center={this.props.center}\n                    key={idx} \n                    lat={item.latitude} \n                    lng={item.longitude} \n                    item={translateCategory(item)}\n                    width={'30px'}\n                    height={'30px'}\n                    zoom={this.props.zoom} ////figure out how to change on zoom change, might have to be rendered not in an array in component but in render itself\n                    clicked={() => this.markerClicked({ lat: item.latitude, lng: item.longitude }, item)}/>\n                );\n            })\n        }\n\n        // console.log('[BudgetMap.js] params', this.props.match.params)        \n        \n\n        return(\n            <div style={{ height: '87vh', width: '100%' }}>\n                {this.props.mapProps ?                 \n                    <Map \n                        {...this.props.mapProps} \n                            zoom={this.props.zoom} \n                            center={this.props.center} \n                            defaultCenter={DEFAULT_CENTER}\n                            markers={markers}\n                            showDistricts={this.props.showDistricts}/> \n                    :null}\n            </div>            \n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        currItem: state.participatoryBudget.currItem,\n        participatoryBudget: state.participatoryBudget.participatoryBudget,        \n        councilMemberLoading: state.participatoryBudget.councilMemberLoading,\n        error: state.participatoryBudget.error,\n        councilMembers: state.participatoryBudget.councilMembers,\n        districts: state.participatoryBudget.districts,\n        districtsLoading: state.participatoryBudget.districtsLoading,   \n        selectedDistricts: state.participatoryBudget.selectedDistricts,   \n        loaded: state.participatoryBudget.loaded,\n        \n        showDistricts: state.setMap.showDistricts,\n        mapProps: state.setMap.mapProps,        \n        center: state.setMap.center,\n        zoom: state.setMap.zoom,\n        clickedItem: state.setMap.clickedItem,\n        selectedBudgetItems: state.subsets.selectedBudgetItems,\n\n        url: state.setMap.url,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {        \n        onSetMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems) => dispatch(actions.setMap(districts, selectedDistricts, councilMembers, selectedBudgetItems)),  \n        onUpdateMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts) => dispatch(actions.updateMap(districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts)),  \n        onResetMap: () => dispatch(actions.resetMap()),\n        onZoomMarker: (center, item) => dispatch(actions.zoomMarker(center, item)),           \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(BudgetMap));"]},"metadata":{},"sourceType":"module"}