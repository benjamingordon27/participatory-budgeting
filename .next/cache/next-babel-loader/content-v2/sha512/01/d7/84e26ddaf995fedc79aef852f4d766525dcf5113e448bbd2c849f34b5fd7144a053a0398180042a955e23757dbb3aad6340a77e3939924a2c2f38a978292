{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Dropdown from '../../../components/UI/Dropdown/Dropdown';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\n\nclass MapControlsManager extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      firstPageLoad: false,\n      selectedYear: '',\n      selectedCategory: '',\n      selectedDistrict: '',\n      minCost: '',\n      maxCost: '',\n      minVotes: '',\n      maxVotes: '',\n      councilMember: ''\n    });\n\n    _defineProperty(this, \"itemsByYear\", event => {\n      this.setState({\n        selectedYear: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"itemsByDistrict\", event => {\n      this.setState({\n        selectedDistrict: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"itemsByCategory\", event => {\n      this.setState({\n        selectedCategory: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"minCostState\", event => {\n      this.setState({\n        minCost: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"maxCostState\", event => {\n      this.setState({\n        maxCost: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"minVotesState\", event => {\n      this.setState({\n        minVotes: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"maxVotesState\", event => {\n      this.setState({\n        maxVotes: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"councilMemberState\", event => {\n      this.setState({\n        councilMember: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"councilMemberWithDistricts\", (districts, councilMembers) => {\n      console.log(districts);\n      console.log(councilMembers); // return districts.forEach((value, idx) => value = value + ': ' + councilMembers[idx])\n    });\n\n    _defineProperty(this, \"clearInput\", () => {\n      // console.log('clearing input ', document.querySelectorAll(\"select\"))\n      Array.from(document.querySelectorAll(\"Input\")).forEach(input => input.value = '');\n      Array.from(document.querySelectorAll(\"select\")).forEach(select => select.value = '');\n      this.setState({\n        selectedYear: '',\n        selectedCategory: '',\n        selectedDistrict: '',\n        minCost: '',\n        maxCost: '',\n        minVotes: '',\n        maxVotes: '',\n        councilMember: ''\n      });\n      this.props.onResetSelectedItems();\n    });\n  }\n\n  componentDidMount() {\n    if (!this.props.participatoryBudget && !this.props.districts && !this.props.councilMembers) this.props.onInitBudget();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!this.state.firstPageLoad && this.props.participatoryBudget) {\n      this.props.onBudgetFilter(this.props.participatoryBudget, this.props.councilMembers, this.state.selectedCategory, this.state.selectedYear, this.state.selectedDistrict, this.state.minCost, this.state.maxCost, this.state.minVotes, this.state.maxVotes, this.state.councilMember);\n      this.setState({\n        firstPageLoad: true\n      });\n    }\n  }\n\n  render() {\n    let data = '';\n\n    if (this.props.loading) {\n      data = /*#__PURE__*/_jsx(Spinner, {});\n    } // console.log('state',this.state)\n\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(Button, {\n        message: 'Zoom In',\n        clicked: this.props.onZoomIn\n      }), /*#__PURE__*/_jsx(Button, {\n        message: 'Zoom Out',\n        clicked: this.props.onZoomOut\n      }), /*#__PURE__*/_jsx(Button, {\n        message: 'Center',\n        clicked: this.props.onCenter\n      }), this.props.participatoryBudget && this.props.districts && this.props.councilMembers && this.props.itemCategories ? /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(Dropdown, {\n          message: 'Items by Council Member',\n          title: 'Council Member',\n          list: this.props.councilMembersList,\n          handleChange: this.councilMemberState\n        }), /*#__PURE__*/_jsx(Dropdown, {\n          message: 'Items by district',\n          title: 'Districts',\n          list: this.props.itemDistricts,\n          handleChange: this.itemsByDistrict\n        }), /*#__PURE__*/_jsx(Dropdown, {\n          message: 'Items by year',\n          title: 'Year',\n          list: this.props.itemYears,\n          handleChange: this.itemsByYear\n        }), /*#__PURE__*/_jsx(Dropdown, {\n          message: 'Items by category',\n          title: 'Category',\n          list: this.props.itemCategories,\n          handleChange: this.itemsByCategory\n        }), /*#__PURE__*/_jsx(Input, {\n          label: \"Minimum cost\",\n          handleChange: this.minCostState,\n          step: \"0.01\"\n        }), /*#__PURE__*/_jsx(Input, {\n          label: \"Maximum cost\",\n          handleChange: this.maxCostState,\n          step: \"0.01\"\n        }), /*#__PURE__*/_jsx(Input, {\n          label: \"Minimum votes\",\n          handleChange: this.minVotesState,\n          step: \"1\"\n        }), /*#__PURE__*/_jsx(Input, {\n          label: \"Maximum votes\",\n          handleChange: this.maxVotesState,\n          step: \"1\"\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Button, {\n          message: 'Submit',\n          clicked: () => this.props.onBudgetFilter(this.props.participatoryBudget, this.props.councilMembers, this.state.selectedCategory, this.state.selectedYear, this.state.selectedDistrict, this.state.minCost, this.state.maxCost, this.state.minVotes, this.state.maxVotes, this.state.councilMember)\n        }), /*#__PURE__*/_jsx(Button, {\n          message: 'Clear',\n          clicked: () => this.clearInput()\n        })]\n      }) : null, data]\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    currItem: state.participatoryBudget.currItem,\n    participatoryBudget: state.participatoryBudget.participatoryBudget,\n    loading: state.participatoryBudget.loading,\n    councilMemberLoading: state.participatoryBudget.councilMemberLoading,\n    error: state.participatoryBudget.error,\n    councilMembers: state.participatoryBudget.councilMembers,\n    councilMembersList: state.participatoryBudget.councilMembersList,\n    districts: state.participatoryBudget.districts,\n    districtsLoading: state.participatoryBudget.districtsLoading,\n    itemCategories: state.participatoryBudget.itemCategories,\n    itemYears: state.participatoryBudget.itemYears,\n    itemDistricts: state.participatoryBudget.itemDistricts,\n    selectedBudgetItems: state.subsets.selectedBudgetItems,\n    mapLoading: state.subsets.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onResetSelectedItems: () => dispatch(actions.resetSelectedItems()),\n    onInitBudget: () => dispatch(actions.initBudget()),\n    onZoomIn: () => dispatch(actions.zoomIn()),\n    onZoomOut: () => dispatch(actions.zoomOut()),\n    onCenter: () => dispatch(actions.center()),\n    onShowDistricts: () => dispatch(actions.showDistricts()),\n    onBudgetFilter: (budget, councilMembers, category, year, district, minCost, maxCost, minVotes, maxVotes, councilMember) => dispatch(actions.budgetFilter(budget, councilMembers, category, year, district, minCost, maxCost, minVotes, maxVotes, councilMember))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapControlsManager);","map":null,"metadata":{},"sourceType":"module"}