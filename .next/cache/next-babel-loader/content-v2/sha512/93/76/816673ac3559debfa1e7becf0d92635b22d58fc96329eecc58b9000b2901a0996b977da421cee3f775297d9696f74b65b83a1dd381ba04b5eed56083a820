{"ast":null,"code":"import { translateCategory, translateCategoryText } from '../../util/translateCategory';\nexport const itemsPerYear = budget => {\n  let budgetAsArray = budget;\n  budgetAsArray = budgetAsArray.filter(item => !isNaN(item.vote_year));\n  var years = [];\n  var outputYearData = [];\n  var keys = Object.keys(budgetAsArray);\n  keys.forEach(function (key) {\n    years.push(budgetAsArray[key].vote_year);\n  });\n  let allYears = years.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b);\n  allYears.map(currYear => {\n    var filteredArray = budget.filter(curr => curr.vote_year === currYear);\n    var count = filteredArray.length;\n    var sumCost = 0;\n    var sumVotes = 0;\n    filteredArray.map(item => {\n      sumCost = sumCost + Number(item.cost);\n      if (!isNaN(item.votes)) sumVotes = sumVotes + Number(item.votes);\n    });\n    outputYearData.push({\n      title: `${currYear}`,\n      count: count,\n      cost: sumCost,\n      votes: sumVotes\n    });\n  });\n  console.log(outputYearData);\n  return outputYearData;\n};\nexport const topTenItemsSorted = (howMany, budget, variable) => {\n  let budgetAsArray = budget;\n  budgetAsArray = budgetAsArray.filter(item => !isNaN(item[variable]));\n  budgetAsArray.sort((a, b) => Number(a[variable]) < Number(b[variable]) ? 1 : -1);\n  budgetAsArray.splice(howMany, budgetAsArray.length - howMany); // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n\n  let data = budgetAsArray;\n  data.forEach(item => item[variable] = Number(item[variable]));\n  return data;\n};\nexport const bottomTenItemsSorted = (howMany, budget, variable) => {\n  let budgetAsArray = budget;\n  budgetAsArray = budgetAsArray.filter(item => !isNaN(item[variable]));\n  budgetAsArray.sort((a, b) => Number(a[variable]) > Number(b[variable]) ? 1 : -1);\n  budgetAsArray.splice(howMany, budgetAsArray.length - howMany); // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n\n  let data = budgetAsArray;\n  data.forEach(item => item[variable] = Number(item[variable]));\n  return data;\n};\nexport const itemsPerDistrict = (budget, councilMembers, howMany, variable) => {\n  let budgetAsArray = budget;\n  let outputDistrictData = [];\n  let districts = [];\n  var keys = Object.keys(councilMembers);\n  keys.forEach(function (key) {\n    districts.push(councilMembers[key].district);\n  });\n  let allDistricts = districts.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b);\n  allDistricts.map(item => {\n    var currCouncilMember = '';\n    var filteredArray = councilMembers.filter(i => item === i.district.match(/\\d+/)[0]);\n    if (filteredArray.length > 0) var currCouncilMember = filteredArray[[0]].name;\n    var sumCount = 0;\n    var sumVotes = 0;\n    budgetAsArray.filter(i => item === i.council_district.match(/\\d+/)[0]).map(item => {\n      sumCount = sumCount + Number(item.cost);\n      if (!isNaN(item.votes)) sumVotes = sumVotes + Number(item.votes);\n    });\n    outputDistrictData.push({\n      title: `District ${item}: ${currCouncilMember}`,\n      count: budgetAsArray.filter(i => item === i.council_district.match(/\\d+/)[0]).length,\n      cost: sumCount,\n      votes: sumVotes\n    });\n  });\n  outputDistrictData.sort((a, b) => Number(a[variable]) < Number(b[variable]) ? 1 : -1);\n  outputDistrictData.splice(howMany, outputDistrictData.length - howMany); // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n\n  let data = outputDistrictData;\n  data.forEach(item => item[variable] = Number(item[variable]));\n  return data;\n};\nexport const totalSum = (budget, variable) => {\n  let budgetAsArray = budget;\n  let sum = 0;\n  budgetAsArray.map(item => {\n    if (item[variable]) sum = sum + Number(item[variable]);\n  });\n  return sum;\n};\nexport const itemsPerCategory = (budget, howMany, variable) => {\n  let budgetAsArray = budget;\n  let outputCategoryData = [];\n  let categories = [];\n  var keys = Object.keys(budget);\n  keys.forEach(function (key) {\n    categories.push(translateCategoryText(budget[key].category));\n  });\n  let allCategories = categories.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b);\n  allCategories.map(item => {\n    var sumCount = 0;\n    var sumCost = 0;\n    var sumVotes = 0;\n    budgetAsArray.filter(i => item === translateCategoryText(i.category)).map(item => {\n      sumCost = sumCost + Number(item.cost);\n      if (!isNaN(item.votes)) sumVotes = sumVotes + Number(item.votes);\n      sumCount = sumCount + 1;\n    });\n    outputCategoryData.push({\n      title: `Category: ${item}`,\n      count: sumCount,\n      cost: sumCost,\n      votes: sumVotes\n    });\n  });\n  outputCategoryData.sort((a, b) => Number(a[variable]) < Number(b[variable]) ? 1 : -1);\n  outputCategoryData.splice(howMany, outputCategoryData.length - howMany); // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n\n  let data = outputCategoryData;\n  data.forEach(item => item[variable] = Number(item[variable]));\n  return data;\n};","map":{"version":3,"sources":["/Users/benjamingordon/Documents/civic-alley-visualization/data-vis/containers/Statistics/statisticHelpers.js"],"names":["translateCategory","translateCategoryText","itemsPerYear","budget","budgetAsArray","filter","item","isNaN","vote_year","years","outputYearData","keys","Object","forEach","key","push","allYears","v","i","a","indexOf","sort","b","map","currYear","filteredArray","curr","count","length","sumCost","sumVotes","Number","cost","votes","title","console","log","topTenItemsSorted","howMany","variable","splice","data","bottomTenItemsSorted","itemsPerDistrict","councilMembers","outputDistrictData","districts","district","allDistricts","currCouncilMember","match","name","sumCount","council_district","totalSum","sum","itemsPerCategory","outputCategoryData","categories","category","allCategories"],"mappings":"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","sourcesContent":["import {translateCategory, translateCategoryText} from '../../util/translateCategory';\n\nexport const itemsPerYear = (budget) => {\n    let budgetAsArray = budget;\n\n    budgetAsArray = budgetAsArray.filter(item => !isNaN(item.vote_year));        \n\n    var years = [];\n    var outputYearData = [];\n\n    var keys = Object.keys(budgetAsArray);\n    keys.forEach(function(key){\n        years.push(budgetAsArray[key].vote_year);\n    });    \n    let allYears = years.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b);\n    \n    allYears.map(currYear => {                            \n        var filteredArray = budget.filter(curr => curr.vote_year === currYear)   \n\n        var count = filteredArray.length;  \n        var sumCost = 0;\n        var sumVotes = 0;\n        filteredArray.map(item => {\n            sumCost = sumCost + Number(item.cost);\n            if(!isNaN(item.votes))\n                sumVotes = sumVotes + Number(item.votes);\n        })\n\n\n        outputYearData.push(                \n            {\n                title: `${currYear}`, \n                count: count,\n                cost: sumCost,\n                votes: sumVotes,\n            }\n        );\n    })\n    console.log(outputYearData)\n    return outputYearData;\n}\n\nexport const topTenItemsSorted = (howMany, budget, variable) => {\n    let budgetAsArray = budget;\n\n    budgetAsArray = budgetAsArray.filter(item => !isNaN(item[variable]));        \n\n    budgetAsArray.sort((a, b) => (Number(a[variable]) < Number(b[variable])) ? 1 : -1)\n    budgetAsArray.splice(howMany,budgetAsArray.length-howMany);  \n\n    // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n    let data = budgetAsArray;\n    data.forEach(item => item[variable] = Number(item[variable]));\n    \n    return data;\n}\n\nexport const bottomTenItemsSorted = (howMany, budget, variable) => {\n    let budgetAsArray = budget;\n\n    budgetAsArray = budgetAsArray.filter(item => !isNaN(item[variable]));        \n\n    budgetAsArray.sort((a, b) => (Number(a[variable]) > Number(b[variable])) ? 1 : -1)\n    budgetAsArray.splice(howMany,budgetAsArray.length-howMany);  \n\n    // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n    let data = budgetAsArray;\n    data.forEach(item => item[variable] = Number(item[variable]));\n    \n    return data;\n}\n\nexport const itemsPerDistrict = (budget, councilMembers, howMany, variable) => {\n    let budgetAsArray = budget;        \n    \n    let outputDistrictData = [];\n\n    let districts = [];\n    var keys = Object.keys(councilMembers);\n    keys.forEach(function(key){\n        districts.push(councilMembers[key].district);\n    });    \n    let allDistricts = districts.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b);\n\n    allDistricts.map(item => {            \n        var currCouncilMember = ''\n        var filteredArray = councilMembers.filter(i => item === i.district.match(/\\d+/)[0]);\n        if(filteredArray.length > 0)                \n            var currCouncilMember = filteredArray[[0]].name;\n        \n        var sumCount = 0;\n        var sumVotes = 0;\n        budgetAsArray.filter(i => item === i.council_district.match(/\\d+/)[0]).map(item => {\n            sumCount = sumCount + Number(item.cost);\n            if(!isNaN(item.votes))\n                sumVotes = sumVotes + Number(item.votes);\n        })\n\n\n        outputDistrictData.push(                \n            {\n                title: `District ${item}: ${currCouncilMember}`, \n                count: budgetAsArray.filter(i => item === i.council_district.match(/\\d+/)[0]).length,\n                cost: sumCount,\n                votes: sumVotes,\n            }\n        );\n    })\n\n\n    outputDistrictData.sort((a, b) => (Number(a[variable]) < Number(b[variable])) ? 1 : -1)\n    outputDistrictData.splice(howMany,outputDistrictData.length-howMany);  \n\n    // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n    let data = outputDistrictData;\n    data.forEach(item => item[variable] = Number(item[variable]));                \n    return data;        \n}\n\nexport const totalSum = (budget, variable) => {\n    let budgetAsArray = budget;\n    let sum = 0;\n\n    budgetAsArray.map(item => {\n        if(item[variable])\n            sum = sum + Number(item[variable])\n    })\n\n    return sum;\n}\n\nexport const itemsPerCategory = (budget, howMany, variable) => {\n    let budgetAsArray = budget;\n    let outputCategoryData = [];\n\n    let categories = [];\n    var keys = Object.keys(budget);\n    keys.forEach(function(key){\n        categories.push(translateCategoryText(budget[key].category));\n    });    \n    let allCategories = categories.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b);\n\n    allCategories.map(item => {\n        var sumCount = 0;\n        var sumCost = 0;\n        var sumVotes = 0;\n        budgetAsArray.filter(i => item === translateCategoryText(i.category)).map(item => {\n            sumCost = sumCost + Number(item.cost);\n            if(!isNaN(item.votes))\n                sumVotes = sumVotes + Number(item.votes);\n            sumCount = sumCount + 1;\n        })                        \n\n        outputCategoryData.push(                \n            {\n                title: `Category: ${item}`, \n                count: sumCount,\n                cost: sumCost,\n                votes: sumVotes,\n            }\n        );\n        \n    })\n\n    outputCategoryData.sort((a, b) => (Number(a[variable]) < Number(b[variable])) ? 1 : -1)\n    outputCategoryData.splice(howMany,outputCategoryData.length-howMany);  \n\n    // let data = budgetAsArray.map(item => Number(item[this.props.variable]));\n    let data = outputCategoryData;\n    data.forEach(item => item[variable] = Number(item[variable]));                \n    return data;        \n}"]},"metadata":{},"sourceType":"module"}