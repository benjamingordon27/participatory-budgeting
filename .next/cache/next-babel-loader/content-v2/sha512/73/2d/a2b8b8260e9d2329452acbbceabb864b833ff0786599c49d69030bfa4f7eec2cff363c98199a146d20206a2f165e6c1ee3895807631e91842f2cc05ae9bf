{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benjamingordon/Documents/civic-alley-visualization/data-vis/components/Map/Map.js\";\nimport React from 'react';\nimport GoogleMapReact from 'google-map-react'; // import polygonCenter from 'geojson-polygon-center';\n\nimport config from './mapConfig';\n\nconst renderDistricts = (map, maps, coords, selectedDistricts, councilMembers, showDistricts) => {\n  let allDistrictPolygons = {}; // let polygonCoords = [];\n\n  console.log('show districts?', showDistricts);\n  console.log(coords);\n\n  if (showDistricts) {\n    Object.keys(coords.features).map(key => {\n      let districtPolygons = [];\n      let currDistrict = coords.features[key].properties.coun_dist;\n      coords.features[key].geometry.coordinates.map(arr => {\n        let coordArr = [];\n        arr[0].map(coordinate => coordArr.push({\n          lat: coordinate[1],\n          lng: coordinate[0]\n        }));\n        var councilDistrictPolygon = new maps.Polygon({\n          paths: coordArr,\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#FF0000\",\n          fillOpacity: 0.35,\n          indexID: currDistrict\n        }); // var center = polygonCenter(polygon.geometry)\n        // console.log('center', polygonCenter(coords.features[key].geometry));\n\n        districtPolygons.push(councilDistrictPolygon); // polygonCoords.push(coordArr);\n\n        var districtInfo = councilMembers.filter(item => item.district === currDistrict); // addListenersOnPolygon(map,maps,councilDistrictPolygon, districtInfo);\n      });\n      allDistrictPolygons[key] = {\n        district: coords.features[key].properties.coun_dist,\n        polygons: districtPolygons\n      };\n    });\n  }\n\n  Object.keys(allDistrictPolygons).map(key => {\n    // if(selectedDistricts.includes(Number(allDistrictPolygons[key].district)))\n    allDistrictPolygons[key].polygons.map(polygon => polygon.setMap(map));\n  });\n};\n\nconst addListenersOnPolygon = (map, maps, polygon, info) => {\n  var infoWindow = new maps.InfoWindow();\n  maps.event.addListener(polygon, 'click', function (event) {\n    infoWindow.setContent('District: ' + polygon.indexID + '<br>Council Member: ' + info[0].name + '<br>Political Party: ' + info[0].political_party);\n    var latLng = event.latLng;\n    infoWindow.setPosition(latLng);\n    infoWindow.open(map);\n  });\n};\n\nconst handleApiLoaded = (map, maps, coords, selectedDistricts, councilMembers, budget) => {\n  console.log('handleAPILoaded called');\n  renderDistricts(map, maps, coords, selectedDistricts, councilMembers);\n};\n\nconst map = props => {\n  console.log('map props', props);\n\n  let output = /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_GOOGLE_MAPS_TOKEN,\n      v: '3.31'\n    } // bootstrapURLKeys={{ key: 'AIzaSyDqqXhc0D85f1gaAYD1tP718D4iH4RSiio', v: '3.31', }}                    \n    ,\n    defaultCenter: props.defaultCenter,\n    center: {\n      lat: Number(props.center.lat),\n      lng: Number(props.center.lng)\n    },\n    zoom: props.zoom,\n    options: config,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: ({\n      map,\n      maps\n    }) => {\n      handleApiLoaded(map, maps, props.districts, props.selectedDistricts, props.councilMembers, props.selectedBudgetItems, props.showDistricts);\n    },\n    children: props.markers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n\n  return output;\n};\n\nexport default map;","map":{"version":3,"sources":["/Users/benjamingordon/Documents/civic-alley-visualization/data-vis/components/Map/Map.js"],"names":["React","GoogleMapReact","config","renderDistricts","map","maps","coords","selectedDistricts","councilMembers","showDistricts","allDistrictPolygons","console","log","Object","keys","features","key","districtPolygons","currDistrict","properties","coun_dist","geometry","coordinates","arr","coordArr","coordinate","push","lat","lng","councilDistrictPolygon","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","indexID","districtInfo","filter","item","district","polygons","polygon","setMap","addListenersOnPolygon","info","infoWindow","InfoWindow","event","addListener","setContent","name","political_party","latLng","setPosition","open","handleApiLoaded","budget","props","output","process","env","REACT_APP_GOOGLE_MAPS_TOKEN","v","defaultCenter","Number","center","zoom","districts","selectedBudgetItems","markers"],"mappings":"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","sourcesContent":["import React from 'react';\nimport GoogleMapReact from 'google-map-react';\n// import polygonCenter from 'geojson-polygon-center';\n\nimport config from './mapConfig';\n\nconst renderDistricts = (map, maps, coords, selectedDistricts, councilMembers, showDistricts) => {\n    let allDistrictPolygons = {};\n    // let polygonCoords = [];\n    console.log('show districts?', showDistricts)\n    console.log(coords)\n\n    if(showDistricts){\n        Object.keys(coords.features).map(key => {  \n            let districtPolygons = [];\n            let currDistrict = coords.features[key].properties.coun_dist;\n            coords.features[key].geometry.coordinates.map(arr => {   \n                let coordArr = [];     \n                arr[0].map(coordinate => coordArr.push({lat: coordinate[1], lng: coordinate[0]}))        \n                \n                var councilDistrictPolygon = new maps.Polygon({\n                    paths: coordArr,\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: \"#FF0000\",\n                    fillOpacity: 0.35,\n                    indexID: currDistrict,\n                });     \n                \n                // var center = polygonCenter(polygon.geometry)\n                // console.log('center', polygonCenter(coords.features[key].geometry));\n\n                districtPolygons.push(councilDistrictPolygon);\n                // polygonCoords.push(coordArr);\n                var districtInfo = councilMembers.filter(item => item.district === currDistrict);                                \n\n                // addListenersOnPolygon(map,maps,councilDistrictPolygon, districtInfo);\n            });            \n            allDistrictPolygons[key] = {district: coords.features[key].properties.coun_dist,polygons: districtPolygons};\n        });\n    }            \n    Object.keys(allDistrictPolygons).map(key => {        \n        // if(selectedDistricts.includes(Number(allDistrictPolygons[key].district)))\n            allDistrictPolygons[key].polygons.map(polygon => polygon.setMap(map))    \n    })\n}\n\nconst addListenersOnPolygon = (map,maps,polygon, info) => {\n    var infoWindow = new maps.InfoWindow();    \n    maps.event.addListener(polygon, 'click', function (event) {\n        infoWindow.setContent('District: '+polygon.indexID + '<br>Council Member: '+ info[0].name+ '<br>Political Party: '+ info[0].political_party);\n        var latLng = event.latLng;\n        infoWindow.setPosition(latLng);\n        infoWindow.open(map);        \n    });  \n}\n\nconst handleApiLoaded = (map, maps, coords, selectedDistricts, councilMembers, budget) => {    \n    console.log('handleAPILoaded called')\n    renderDistricts(map, maps, coords, selectedDistricts, councilMembers); \n}\n\nconst map = (props) => {\n    console.log('map props',props)\n    let output =\n        <GoogleMapReact\n                    bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_TOKEN, v: '3.31', }}                                        \n                    // bootstrapURLKeys={{ key: 'AIzaSyDqqXhc0D85f1gaAYD1tP718D4iH4RSiio', v: '3.31', }}                    \n                    defaultCenter={props.defaultCenter}\n                    center={{lat: Number(props.center.lat), lng: Number(props.center.lng)}}\n                    zoom={props.zoom}\n                    options={config}   \n\n                    yesIWantToUseGoogleMapApiInternals\n                    onGoogleApiLoaded={({ map, maps }) => {\n                        handleApiLoaded(map, maps, props.districts, props.selectedDistricts, props.councilMembers, props.selectedBudgetItems, props.showDistricts)\n                    }}\n        >\n            {props.markers}\n        </GoogleMapReact>;\n\n    return output;\n}\n\nexport default map;"]},"metadata":{},"sourceType":"module"}