{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benjamingordon/Documents/civic-alley-visualization/data-vis/containers/ParticipatoryBudgetMap/MapControlsManager/MapControlsManager.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Dropdown from '../../../components/UI/Dropdown/Dropdown';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\n\nclass MapControlsManager extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      firstPageLoad: false,\n      selectedYear: '',\n      selectedCategory: '',\n      selectedDistrict: '',\n      minCost: '',\n      maxCost: '',\n      minVotes: '',\n      maxVotes: '',\n      councilMember: '',\n      query: ''\n    });\n\n    _defineProperty(this, \"getQuery\", () => {\n      var newQuery = '';\n      if (this.state.selectedYear !== '') newQuery += 'year=' + this.state.selectedYear + '&';\n      if (this.state.selectedCategory !== '') newQuery += 'category=' + this.state.selectedCategory + '&';\n      if (this.state.selectedDistrict !== '') newQuery += 'district=' + this.state.selectedDistrict + '&';\n      if (this.state.minCost !== '') newQuery += 'minCost=' + this.state.minCost + '&';\n      if (this.state.maxCost !== '') newQuery += 'maxCost=' + this.state.maxCost + '&';\n      if (this.state.minVotes !== '') newQuery += 'minVotes=' + this.state.minVotes + '&';\n      if (this.state.maxVotes !== '') newQuery += 'maxVotes=' + this.state.maxVotes + '&'; // if(newQuery.charAt(newQuery.length -1) === '&')\n\n      if (newQuery.length > 0) {\n        newQuery = '?id=2&' + newQuery;\n        newQuery = newQuery.substring(0, newQuery.length - 1);\n      } // this.setState({query: newQuery});\n\n\n      return newQuery;\n    });\n\n    _defineProperty(this, \"checkSelected\", array => {\n      Object.keys(array).map(item => {\n        if (array[item] !== '') {\n          return false;\n        }\n      });\n      return true;\n    });\n\n    _defineProperty(this, \"submit\", (budget, councilMembers, category, year, district, minCost, maxCost, minVotes, maxVotes, councilMember) => {\n      console.log('are we submitting?');\n      this.props.onResetMap();\n      this.props.onUpdateMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);\n      this.props.onBudgetFilter(budget, councilMembers, category, year, district, minCost, maxCost, minVotes, maxVotes, councilMember);\n      this.props.onResetClickedItem();\n      this.props.onResetFindItem();\n      this.props.onCenter();\n    });\n\n    _defineProperty(this, \"itemsByYear\", event => {\n      this.setState({\n        selectedYear: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"itemsByDistrict\", event => {\n      this.setState({\n        selectedDistrict: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"itemsByCategory\", event => {\n      this.setState({\n        selectedCategory: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"minCostState\", event => {\n      this.setState({\n        minCost: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"maxCostState\", event => {\n      this.setState({\n        maxCost: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"minVotesState\", event => {\n      this.setState({\n        minVotes: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"maxVotesState\", event => {\n      this.setState({\n        maxVotes: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"councilMemberState\", event => {\n      this.setState({\n        councilMember: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"councilMemberWithDistricts\", (districts, councilMembers) => {\n      console.log(districts);\n      console.log(councilMembers); // return districts.forEach((value, idx) => value = value + ': ' + councilMembers[idx])\n    });\n\n    _defineProperty(this, \"clearInput\", () => {\n      // console.log('clearing input ', document.querySelectorAll(\"select\"))\n      Array.from(document.querySelectorAll(\"Input\")).forEach(input => input.value = '');\n      Array.from(document.querySelectorAll(\"select\")).forEach(select => select.value = '');\n      this.setState({\n        selectedYear: '',\n        selectedCategory: '',\n        selectedDistrict: '',\n        minCost: '',\n        maxCost: '',\n        minVotes: '',\n        maxVotes: '',\n        councilMember: ''\n      }); // this.props.onResetSelectedItems();\n\n      this.props.onInitBudget();\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      firstPageLoad: false\n    });\n\n    if (!this.props.participatoryBudget && !this.props.districts && !this.props.councilMembers) {\n      this.props.onInitBudget();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!this.state.firstPageLoad && this.props.participatoryBudget) {\n      this.props.onBudgetFilter(this.props.participatoryBudget, this.props.councilMembers, this.state.selectedCategory, this.state.selectedYear, this.state.selectedDistrict, this.state.minCost, this.state.maxCost, this.state.minVotes, this.state.maxVotes, this.state.councilMember);\n      this.setState({\n        firstPageLoad: true\n      });\n    }\n  }\n\n  render() {\n    let data = '';\n\n    if (this.props.loading) {\n      data = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 20\n      }, this);\n    }\n\n    console.log('state', this.state);\n    console.log('props', this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        message: 'Zoom In',\n        clicked: this.props.onZoomIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        message: 'Zoom Out',\n        clicked: this.props.onZoomOut\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        message: 'Center',\n        clicked: this.props.onCenter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), this.props.participatoryBudget && this.props.districts && this.props.councilMembers && this.props.itemCategories ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          message: 'Items by Council Member',\n          title: 'Council Member',\n          list: this.props.councilMembersList,\n          handleChange: this.councilMemberState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          message: 'Items by district',\n          title: 'Districts',\n          list: this.props.itemDistricts,\n          handleChange: this.itemsByDistrict\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          message: 'Items by year',\n          title: 'Year',\n          list: this.props.itemYears,\n          handleChange: this.itemsByYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          message: 'Items by category',\n          title: 'Category',\n          list: this.props.itemCategories,\n          handleChange: this.itemsByCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          label: \"Minimum cost\",\n          handleChange: this.minCostState,\n          step: \"0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          label: \"Maximum cost\",\n          handleChange: this.maxCostState,\n          step: \"0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          label: \"Minimum votes\",\n          handleChange: this.minVotesState,\n          step: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          label: \"Maximum votes\",\n          handleChange: this.maxVotesState,\n          step: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          message: 'Submit',\n          link: '/map' + this.getQuery(),\n          clicked: () => this.submit(this.props.participatoryBudget, this.props.councilMembers, this.state.selectedCategory, this.state.selectedYear, this.state.selectedDistrict, this.state.minCost, this.state.maxCost, this.state.minVotes, this.state.maxVotes, this.state.councilMember)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          message: 'Clear',\n          link: \"/map\",\n          clicked: () => this.clearInput()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this) : null, data]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    currItem: state.participatoryBudget.currItem,\n    participatoryBudget: state.participatoryBudget.participatoryBudget,\n    loading: state.participatoryBudget.loading,\n    councilMemberLoading: state.participatoryBudget.councilMemberLoading,\n    error: state.participatoryBudget.error,\n    councilMembers: state.participatoryBudget.councilMembers,\n    councilMembersList: state.participatoryBudget.councilMembersList,\n    districts: state.participatoryBudget.districts,\n    districtsLoading: state.participatoryBudget.districtsLoading,\n    itemCategories: state.participatoryBudget.itemCategories,\n    itemYears: state.participatoryBudget.itemYears,\n    itemDistricts: state.participatoryBudget.itemDistricts,\n    selectedBudgetItems: state.setMap.selectedBudgetItems,\n    mapLoading: state.setMap.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems) => dispatch(actions.setMap(districts, selectedDistricts, councilMembers, selectedBudgetItems)),\n    onUpdateMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts) => dispatch(actions.updateMap(districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts)),\n    onResetMap: () => dispatch(actions.resetMap()),\n    onZoomMarker: (center, item) => dispatch(actions.zoomMarker(center, item)),\n    onResetSelectedItems: () => dispatch(actions.resetSelectedItems()),\n    onResetClickedItem: () => dispatch(actions.resetClickedItem()),\n    onInitBudget: () => dispatch(actions.initBudget()),\n    onZoomIn: () => dispatch(actions.zoomIn()),\n    onZoomOut: () => dispatch(actions.zoomOut()),\n    onCenter: () => dispatch(actions.center()),\n    onShowDistricts: () => dispatch(actions.showDistricts()),\n    onBudgetFilter: (budget, councilMembers, category, year, district, minCost, maxCost, minVotes, maxVotes, councilMember) => dispatch(actions.budgetFilter(budget, councilMembers, category, year, district, minCost, maxCost, minVotes, maxVotes, councilMember))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapControlsManager);","map":{"version":3,"sources":["/Users/benjamingordon/Documents/civic-alley-visualization/data-vis/containers/ParticipatoryBudgetMap/MapControlsManager/MapControlsManager.js"],"names":["React","Component","connect","actions","Spinner","Dropdown","Button","Input","MapControlsManager","firstPageLoad","selectedYear","selectedCategory","selectedDistrict","minCost","maxCost","minVotes","maxVotes","councilMember","query","newQuery","state","length","substring","array","Object","keys","map","item","budget","councilMembers","category","year","district","console","log","props","onResetMap","onUpdateMap","districts","selectedDistricts","selectedBudgetItems","onBudgetFilter","onResetClickedItem","onResetFindItem","onCenter","event","setState","target","value","Array","from","document","querySelectorAll","forEach","input","select","onInitBudget","componentDidMount","participatoryBudget","componentDidUpdate","prevProps","prevState","render","data","loading","onZoomIn","onZoomOut","itemCategories","councilMembersList","councilMemberState","itemDistricts","itemsByDistrict","itemYears","itemsByYear","itemsByCategory","minCostState","maxCostState","minVotesState","maxVotesState","getQuery","submit","clearInput","mapStateToProps","currItem","councilMemberLoading","error","districtsLoading","setMap","mapLoading","mapDispatchToProps","dispatch","onSetMap","showDistricts","updateMap","resetMap","onZoomMarker","center","zoomMarker","onResetSelectedItems","resetSelectedItems","resetClickedItem","initBudget","zoomIn","zoomOut","onShowDistricts","budgetFilter"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Dropdown from '../../../components/UI/Dropdown/Dropdown';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\n\nclass MapControlsManager extends Component {\n\n    state = {\n        firstPageLoad: false,\n        \n        selectedYear: '',\n        selectedCategory: '',\n        selectedDistrict: '',\n        minCost: '',\n        maxCost: '',\n        minVotes: '',\n        maxVotes: '',\n        councilMember: '',\n\n        query: '',\n    }\n\n    componentDidMount(){                \n        this.setState({firstPageLoad: false});\n        if(!this.props.participatoryBudget && !this.props.districts && !this.props.councilMembers){\n            this.props.onInitBudget();\n        }            \n    }\n\n    componentDidUpdate(prevProps, prevState){        \n        \n        if(!this.state.firstPageLoad && this.props.participatoryBudget){\n            this.props.onBudgetFilter(this.props.participatoryBudget, this.props.councilMembers,\n                this.state.selectedCategory, \n                this.state.selectedYear, \n                this.state.selectedDistrict, \n                this.state.minCost, \n                this.state.maxCost,\n                this.state.minVotes, \n                this.state.maxVotes,   \n                this.state.councilMember,                 \n                )\n\n            this.setState({firstPageLoad: true}) \n        }\n    }\n\n    getQuery = () => {\n        var newQuery = '';\n        if(this.state.selectedYear !== '')\n            newQuery += 'year='+this.state.selectedYear+'&'\n        if(this.state.selectedCategory !== '')\n            newQuery += 'category='+this.state.selectedCategory+'&'\n        if(this.state.selectedDistrict !== '')\n            newQuery += 'district='+this.state.selectedDistrict+'&'\n        if(this.state.minCost !== '')\n            newQuery += 'minCost='+this.state.minCost+'&'\n        if(this.state.maxCost !== '')\n            newQuery += 'maxCost='+this.state.maxCost+'&'\n        if(this.state.minVotes !== '')\n            newQuery += 'minVotes='+this.state.minVotes+'&'\n        if(this.state.maxVotes !== '')\n            newQuery += 'maxVotes='+this.state.maxVotes+'&'\n        // if(newQuery.charAt(newQuery.length -1) === '&')\n        if(newQuery.length > 0){\n            newQuery = '?id=2&' + newQuery;\n            newQuery = newQuery.substring(0, newQuery.length - 1);\n        }\n        \n        // this.setState({query: newQuery});\n        return newQuery;\n    }\n\n    checkSelected = (array) => {\n        Object.keys(array).map(item => {\n            if(array[item] !== ''){\n                return false;\n            }\n        })\n        return true;\n    }\n\n    submit = (budget, councilMembers, category, year, district,minCost, maxCost, minVotes, maxVotes, councilMember) => {                \n        console.log('are we submitting?')\n        \n        this.props.onResetMap();\n        this.props.onUpdateMap(this.props.districts, this.props.selectedDistricts, this.props.councilMembers, this.props.selectedBudgetItems);\n        this.props.onBudgetFilter(budget, councilMembers, category, year, district,minCost, maxCost, minVotes, maxVotes, councilMember);\n        this.props.onResetClickedItem();\n        this.props.onResetFindItem();\n        this.props.onCenter();\n    }\n\n    itemsByYear = (event) => {                \n        this.setState({selectedYear: event.target.value})\n    }\n\n    itemsByDistrict = (event) => {        \n        this.setState({selectedDistrict: event.target.value})\n    }\n\n    itemsByCategory = (event) => {                \n        this.setState({selectedCategory: event.target.value})\n    }\n\n    minCostState = (event) => {\n        this.setState({minCost: event.target.value})\n    }\n\n    maxCostState = (event) => {\n        this.setState({maxCost: event.target.value})\n    }\n\n    minVotesState = (event) => {\n        this.setState({minVotes: event.target.value})\n    }\n\n    maxVotesState = (event) => {\n        this.setState({maxVotes: event.target.value})\n    }\n\n    councilMemberState = (event) => {\n        this.setState({councilMember: event.target.value})\n    }\n\n    councilMemberWithDistricts = (districts, councilMembers) => {\n\n        console.log(districts)\n        console.log(councilMembers)\n        // return districts.forEach((value, idx) => value = value + ': ' + councilMembers[idx])\n    }\n\n    clearInput = () => {        \n        // console.log('clearing input ', document.querySelectorAll(\"select\"))\n        Array.from(document.querySelectorAll(\"Input\")).forEach(\n            input => (input.value = '')\n        );\n        Array.from(document.querySelectorAll(\"select\")).forEach(\n            select => (select.value = '')\n        );\n        this.setState({\n            selectedYear: '',\n            selectedCategory: '',\n            selectedDistrict: '',\n            minCost: '',\n            maxCost: '',\n            minVotes: '',\n            maxVotes: '',\n            councilMember: '',\n        })\n\n        // this.props.onResetSelectedItems();\n        this.props.onInitBudget();\n\n    }\n\n    render(){\n        let data ='';\n        if(this.props.loading){\n            data = <Spinner />;\n        }\n\n        console.log('state',this.state)\n        console.log('props',this.props)\n        \n        return (\n            <div>\n\n                <Button message={'Zoom In'} clicked={this.props.onZoomIn}/>\n                <Button message={'Zoom Out'} clicked={this.props.onZoomOut}/>  \n                <Button message={'Center'} clicked={this.props.onCenter}/>  \n                {/* {this.props.districts ?<Button message={'Show Districts'} clicked={this.props.onShowDistricts}/> :null} */}\n\n                {this.props.participatoryBudget && this.props.districts && this.props.councilMembers && this.props.itemCategories ?\n                    <div>                        \n                        <Dropdown message={'Items by Council Member'} title= {'Council Member'} list={this.props.councilMembersList} handleChange={this.councilMemberState}/>\n                        <Dropdown message={'Items by district'} title= {'Districts'} list={this.props.itemDistricts} handleChange={this.itemsByDistrict}/>\n                        <Dropdown message={'Items by year'} title={'Year'} list={this.props.itemYears} handleChange={this.itemsByYear}/>\n                        <Dropdown message={'Items by category'} title={'Category'} list={this.props.itemCategories} handleChange={this.itemsByCategory}/>\n                        <Input label='Minimum cost' handleChange={this.minCostState} step='0.01'/>\n                        <Input label='Maximum cost' handleChange={this.maxCostState} step='0.01'/>\n                        <Input label='Minimum votes' handleChange={this.minVotesState} step='1'/>\n                        <Input label='Maximum votes' handleChange={this.maxVotesState} step='1'/>\n\n                        <br></br>\n                        <Button message={'Submit'} link={'/map'+this.getQuery()} clicked = {() => \n                            this.submit(this.props.participatoryBudget, this.props.councilMembers,\n                                        this.state.selectedCategory, \n                                        this.state.selectedYear, \n                                        this.state.selectedDistrict, \n                                        this.state.minCost, \n                                        this.state.maxCost,\n                                        this.state.minVotes, \n                                        this.state.maxVotes,   \n                                        this.state.councilMember,                 \n                                        )}/>                                                \n                        <Button message={'Clear'} link='/map' clicked ={() => this.clearInput()} />\n                    </div>\n                :null}\n                {data}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        currItem: state.participatoryBudget.currItem,\n        participatoryBudget: state.participatoryBudget.participatoryBudget,\n        loading: state.participatoryBudget.loading,\n        councilMemberLoading: state.participatoryBudget.councilMemberLoading,\n        error: state.participatoryBudget.error,\n        councilMembers: state.participatoryBudget.councilMembers,\n        councilMembersList: state.participatoryBudget.councilMembersList,\n        districts: state.participatoryBudget.districts,\n        districtsLoading: state.participatoryBudget.districtsLoading,\n        itemCategories: state.participatoryBudget.itemCategories,\n        itemYears: state.participatoryBudget.itemYears,\n        itemDistricts: state.participatoryBudget.itemDistricts,\n\n        selectedBudgetItems: state.setMap.selectedBudgetItems,\n        mapLoading: state.setMap.loading,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {        \n        onSetMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems) => dispatch(actions.setMap(districts, selectedDistricts, councilMembers, selectedBudgetItems)),  \n        onUpdateMap: (districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts) => dispatch(actions.updateMap(districts, selectedDistricts, councilMembers, selectedBudgetItems, showDistricts)),  \n        onResetMap: () => dispatch(actions.resetMap()),\n        onZoomMarker: (center, item) => dispatch(actions.zoomMarker(center, item)),   \n\n        \n        onResetSelectedItems: () => dispatch(actions.resetSelectedItems()),\n        onResetClickedItem: () => dispatch(actions.resetClickedItem()),\n        onInitBudget: () => dispatch(actions.initBudget()),          \n        onZoomIn: () => dispatch(actions.zoomIn()),\n        onZoomOut: () => dispatch(actions.zoomOut()),\n        onCenter: () => dispatch(actions.center()),\n        onShowDistricts: () => dispatch(actions.showDistricts()),\n        onBudgetFilter: (budget, councilMembers, category, year, district,minCost, maxCost, minVotes, maxVotes, councilMember) => \n            dispatch(actions.budgetFilter(budget, councilMembers,\n                        category, \n                        year, \n                        district, \n                        minCost, \n                        maxCost, \n                        minVotes, \n                        maxVotes,\n                        councilMember,\n                        )),        \n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MapControlsManager);"]},"metadata":{},"sourceType":"module"}